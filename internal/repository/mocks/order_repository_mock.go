// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i application-design-test/internal/service.OrderRepository -o order_repository_mock.go -n OrderRepositoryMock -p mocks

import (
	"application-design-test/internal/model"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderRepositoryMock implements mm_service.OrderRepository
type OrderRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSaveOrder          func(ctx context.Context, order *model.Order) (err error)
	funcSaveOrderOrigin    string
	inspectFuncSaveOrder   func(ctx context.Context, order *model.Order)
	afterSaveOrderCounter  uint64
	beforeSaveOrderCounter uint64
	SaveOrderMock          mOrderRepositoryMockSaveOrder
}

// NewOrderRepositoryMock returns a mock for mm_service.OrderRepository
func NewOrderRepositoryMock(t minimock.Tester) *OrderRepositoryMock {
	m := &OrderRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SaveOrderMock = mOrderRepositoryMockSaveOrder{mock: m}
	m.SaveOrderMock.callArgs = []*OrderRepositoryMockSaveOrderParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderRepositoryMockSaveOrder struct {
	optional           bool
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockSaveOrderExpectation
	expectations       []*OrderRepositoryMockSaveOrderExpectation

	callArgs []*OrderRepositoryMockSaveOrderParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderRepositoryMockSaveOrderExpectation specifies expectation struct of the OrderRepository.SaveOrder
type OrderRepositoryMockSaveOrderExpectation struct {
	mock               *OrderRepositoryMock
	params             *OrderRepositoryMockSaveOrderParams
	paramPtrs          *OrderRepositoryMockSaveOrderParamPtrs
	expectationOrigins OrderRepositoryMockSaveOrderExpectationOrigins
	results            *OrderRepositoryMockSaveOrderResults
	returnOrigin       string
	Counter            uint64
}

// OrderRepositoryMockSaveOrderParams contains parameters of the OrderRepository.SaveOrder
type OrderRepositoryMockSaveOrderParams struct {
	ctx   context.Context
	order *model.Order
}

// OrderRepositoryMockSaveOrderParamPtrs contains pointers to parameters of the OrderRepository.SaveOrder
type OrderRepositoryMockSaveOrderParamPtrs struct {
	ctx   *context.Context
	order **model.Order
}

// OrderRepositoryMockSaveOrderResults contains results of the OrderRepository.SaveOrder
type OrderRepositoryMockSaveOrderResults struct {
	err error
}

// OrderRepositoryMockSaveOrderOrigins contains origins of expectations of the OrderRepository.SaveOrder
type OrderRepositoryMockSaveOrderExpectationOrigins struct {
	origin      string
	originCtx   string
	originOrder string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) Optional() *mOrderRepositoryMockSaveOrder {
	mmSaveOrder.optional = true
	return mmSaveOrder
}

// Expect sets up expected params for OrderRepository.SaveOrder
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) Expect(ctx context.Context, order *model.Order) *mOrderRepositoryMockSaveOrder {
	if mmSaveOrder.mock.funcSaveOrder != nil {
		mmSaveOrder.mock.t.Fatalf("OrderRepositoryMock.SaveOrder mock is already set by Set")
	}

	if mmSaveOrder.defaultExpectation == nil {
		mmSaveOrder.defaultExpectation = &OrderRepositoryMockSaveOrderExpectation{}
	}

	if mmSaveOrder.defaultExpectation.paramPtrs != nil {
		mmSaveOrder.mock.t.Fatalf("OrderRepositoryMock.SaveOrder mock is already set by ExpectParams functions")
	}

	mmSaveOrder.defaultExpectation.params = &OrderRepositoryMockSaveOrderParams{ctx, order}
	mmSaveOrder.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSaveOrder.expectations {
		if minimock.Equal(e.params, mmSaveOrder.defaultExpectation.params) {
			mmSaveOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveOrder.defaultExpectation.params)
		}
	}

	return mmSaveOrder
}

// ExpectCtxParam1 sets up expected param ctx for OrderRepository.SaveOrder
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) ExpectCtxParam1(ctx context.Context) *mOrderRepositoryMockSaveOrder {
	if mmSaveOrder.mock.funcSaveOrder != nil {
		mmSaveOrder.mock.t.Fatalf("OrderRepositoryMock.SaveOrder mock is already set by Set")
	}

	if mmSaveOrder.defaultExpectation == nil {
		mmSaveOrder.defaultExpectation = &OrderRepositoryMockSaveOrderExpectation{}
	}

	if mmSaveOrder.defaultExpectation.params != nil {
		mmSaveOrder.mock.t.Fatalf("OrderRepositoryMock.SaveOrder mock is already set by Expect")
	}

	if mmSaveOrder.defaultExpectation.paramPtrs == nil {
		mmSaveOrder.defaultExpectation.paramPtrs = &OrderRepositoryMockSaveOrderParamPtrs{}
	}
	mmSaveOrder.defaultExpectation.paramPtrs.ctx = &ctx
	mmSaveOrder.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSaveOrder
}

// ExpectOrderParam2 sets up expected param order for OrderRepository.SaveOrder
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) ExpectOrderParam2(order *model.Order) *mOrderRepositoryMockSaveOrder {
	if mmSaveOrder.mock.funcSaveOrder != nil {
		mmSaveOrder.mock.t.Fatalf("OrderRepositoryMock.SaveOrder mock is already set by Set")
	}

	if mmSaveOrder.defaultExpectation == nil {
		mmSaveOrder.defaultExpectation = &OrderRepositoryMockSaveOrderExpectation{}
	}

	if mmSaveOrder.defaultExpectation.params != nil {
		mmSaveOrder.mock.t.Fatalf("OrderRepositoryMock.SaveOrder mock is already set by Expect")
	}

	if mmSaveOrder.defaultExpectation.paramPtrs == nil {
		mmSaveOrder.defaultExpectation.paramPtrs = &OrderRepositoryMockSaveOrderParamPtrs{}
	}
	mmSaveOrder.defaultExpectation.paramPtrs.order = &order
	mmSaveOrder.defaultExpectation.expectationOrigins.originOrder = minimock.CallerInfo(1)

	return mmSaveOrder
}

// Inspect accepts an inspector function that has same arguments as the OrderRepository.SaveOrder
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) Inspect(f func(ctx context.Context, order *model.Order)) *mOrderRepositoryMockSaveOrder {
	if mmSaveOrder.mock.inspectFuncSaveOrder != nil {
		mmSaveOrder.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.SaveOrder")
	}

	mmSaveOrder.mock.inspectFuncSaveOrder = f

	return mmSaveOrder
}

// Return sets up results that will be returned by OrderRepository.SaveOrder
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) Return(err error) *OrderRepositoryMock {
	if mmSaveOrder.mock.funcSaveOrder != nil {
		mmSaveOrder.mock.t.Fatalf("OrderRepositoryMock.SaveOrder mock is already set by Set")
	}

	if mmSaveOrder.defaultExpectation == nil {
		mmSaveOrder.defaultExpectation = &OrderRepositoryMockSaveOrderExpectation{mock: mmSaveOrder.mock}
	}
	mmSaveOrder.defaultExpectation.results = &OrderRepositoryMockSaveOrderResults{err}
	mmSaveOrder.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSaveOrder.mock
}

// Set uses given function f to mock the OrderRepository.SaveOrder method
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) Set(f func(ctx context.Context, order *model.Order) (err error)) *OrderRepositoryMock {
	if mmSaveOrder.defaultExpectation != nil {
		mmSaveOrder.mock.t.Fatalf("Default expectation is already set for the OrderRepository.SaveOrder method")
	}

	if len(mmSaveOrder.expectations) > 0 {
		mmSaveOrder.mock.t.Fatalf("Some expectations are already set for the OrderRepository.SaveOrder method")
	}

	mmSaveOrder.mock.funcSaveOrder = f
	mmSaveOrder.mock.funcSaveOrderOrigin = minimock.CallerInfo(1)
	return mmSaveOrder.mock
}

// When sets expectation for the OrderRepository.SaveOrder which will trigger the result defined by the following
// Then helper
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) When(ctx context.Context, order *model.Order) *OrderRepositoryMockSaveOrderExpectation {
	if mmSaveOrder.mock.funcSaveOrder != nil {
		mmSaveOrder.mock.t.Fatalf("OrderRepositoryMock.SaveOrder mock is already set by Set")
	}

	expectation := &OrderRepositoryMockSaveOrderExpectation{
		mock:               mmSaveOrder.mock,
		params:             &OrderRepositoryMockSaveOrderParams{ctx, order},
		expectationOrigins: OrderRepositoryMockSaveOrderExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSaveOrder.expectations = append(mmSaveOrder.expectations, expectation)
	return expectation
}

// Then sets up OrderRepository.SaveOrder return parameters for the expectation previously defined by the When method
func (e *OrderRepositoryMockSaveOrderExpectation) Then(err error) *OrderRepositoryMock {
	e.results = &OrderRepositoryMockSaveOrderResults{err}
	return e.mock
}

// Times sets number of times OrderRepository.SaveOrder should be invoked
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) Times(n uint64) *mOrderRepositoryMockSaveOrder {
	if n == 0 {
		mmSaveOrder.mock.t.Fatalf("Times of OrderRepositoryMock.SaveOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSaveOrder.expectedInvocations, n)
	mmSaveOrder.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSaveOrder
}

func (mmSaveOrder *mOrderRepositoryMockSaveOrder) invocationsDone() bool {
	if len(mmSaveOrder.expectations) == 0 && mmSaveOrder.defaultExpectation == nil && mmSaveOrder.mock.funcSaveOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSaveOrder.mock.afterSaveOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSaveOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SaveOrder implements mm_service.OrderRepository
func (mmSaveOrder *OrderRepositoryMock) SaveOrder(ctx context.Context, order *model.Order) (err error) {
	mm_atomic.AddUint64(&mmSaveOrder.beforeSaveOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveOrder.afterSaveOrderCounter, 1)

	mmSaveOrder.t.Helper()

	if mmSaveOrder.inspectFuncSaveOrder != nil {
		mmSaveOrder.inspectFuncSaveOrder(ctx, order)
	}

	mm_params := OrderRepositoryMockSaveOrderParams{ctx, order}

	// Record call args
	mmSaveOrder.SaveOrderMock.mutex.Lock()
	mmSaveOrder.SaveOrderMock.callArgs = append(mmSaveOrder.SaveOrderMock.callArgs, &mm_params)
	mmSaveOrder.SaveOrderMock.mutex.Unlock()

	for _, e := range mmSaveOrder.SaveOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSaveOrder.SaveOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveOrder.SaveOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveOrder.SaveOrderMock.defaultExpectation.params
		mm_want_ptrs := mmSaveOrder.SaveOrderMock.defaultExpectation.paramPtrs

		mm_got := OrderRepositoryMockSaveOrderParams{ctx, order}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSaveOrder.t.Errorf("OrderRepositoryMock.SaveOrder got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveOrder.SaveOrderMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.order != nil && !minimock.Equal(*mm_want_ptrs.order, mm_got.order) {
				mmSaveOrder.t.Errorf("OrderRepositoryMock.SaveOrder got unexpected parameter order, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveOrder.SaveOrderMock.defaultExpectation.expectationOrigins.originOrder, *mm_want_ptrs.order, mm_got.order, minimock.Diff(*mm_want_ptrs.order, mm_got.order))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveOrder.t.Errorf("OrderRepositoryMock.SaveOrder got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSaveOrder.SaveOrderMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveOrder.SaveOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveOrder.t.Fatal("No results are set for the OrderRepositoryMock.SaveOrder")
		}
		return (*mm_results).err
	}
	if mmSaveOrder.funcSaveOrder != nil {
		return mmSaveOrder.funcSaveOrder(ctx, order)
	}
	mmSaveOrder.t.Fatalf("Unexpected call to OrderRepositoryMock.SaveOrder. %v %v", ctx, order)
	return
}

// SaveOrderAfterCounter returns a count of finished OrderRepositoryMock.SaveOrder invocations
func (mmSaveOrder *OrderRepositoryMock) SaveOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveOrder.afterSaveOrderCounter)
}

// SaveOrderBeforeCounter returns a count of OrderRepositoryMock.SaveOrder invocations
func (mmSaveOrder *OrderRepositoryMock) SaveOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveOrder.beforeSaveOrderCounter)
}

// Calls returns a list of arguments used in each call to OrderRepositoryMock.SaveOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveOrder *mOrderRepositoryMockSaveOrder) Calls() []*OrderRepositoryMockSaveOrderParams {
	mmSaveOrder.mutex.RLock()

	argCopy := make([]*OrderRepositoryMockSaveOrderParams, len(mmSaveOrder.callArgs))
	copy(argCopy, mmSaveOrder.callArgs)

	mmSaveOrder.mutex.RUnlock()

	return argCopy
}

// MinimockSaveOrderDone returns true if the count of the SaveOrder invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockSaveOrderDone() bool {
	if m.SaveOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveOrderMock.invocationsDone()
}

// MinimockSaveOrderInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockSaveOrderInspect() {
	for _, e := range m.SaveOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepositoryMock.SaveOrder at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveOrderCounter := mm_atomic.LoadUint64(&m.afterSaveOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveOrderMock.defaultExpectation != nil && afterSaveOrderCounter < 1 {
		if m.SaveOrderMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderRepositoryMock.SaveOrder at\n%s", m.SaveOrderMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderRepositoryMock.SaveOrder at\n%s with params: %#v", m.SaveOrderMock.defaultExpectation.expectationOrigins.origin, *m.SaveOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveOrder != nil && afterSaveOrderCounter < 1 {
		m.t.Errorf("Expected call to OrderRepositoryMock.SaveOrder at\n%s", m.funcSaveOrderOrigin)
	}

	if !m.SaveOrderMock.invocationsDone() && afterSaveOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderRepositoryMock.SaveOrder at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveOrderMock.expectedInvocations), m.SaveOrderMock.expectedInvocationsOrigin, afterSaveOrderCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSaveOrderInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSaveOrderDone()
}
